def calcul_sum(list_str):
    list_int = [int(i) for i in list_str]
    return sum(list_int)


# def create_list(data_str):
#     list_number = []
#     last_data = None
#     # verify 2nd to last data
#     for s in data_str:
#         if last_data != None and last_data == s:
#             list_number.append(s)
#         if s is not "\n":
#             last_data = s
#     # for the first data
#     if last_data == data_str[0]:
#         list_number.append(data_str[0])
#
#     return list_number

def create_list(data_str):
    list_number = []

    step = len(data_str) // 2
    # print("step : %d" % (step))

    for s in range(len(data_str)):
        index = s - step
        # print("s : %d" % (s))
        # print("index : %d" % (index))
        digit_to_compare = data_str[index]
        # print("digit_to_compare : %s" % (digit_to_compare))
        # print("data_str[s] : %s" % (data_str[s]))
        if digit_to_compare == data_str[s]:
            list_number.append(data_str[s])

    print(list_number)
    return list_number


def day1(path):
    file_to_read = open(path, 'r')
    txt = file_to_read.read()
    list_to_sum = create_list(txt)
    # list_to_sum = create_list(str(path))
    result = calcul_sum(list_to_sum)
    print(result)


# day1(12131415)
day1('./day1_input1.d')

# day
# )
